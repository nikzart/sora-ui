name: Build Electron App

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v0.0.1, v1.0.0, etc.
  workflow_dispatch:  # Allow manual trigger from GitHub Actions tab

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file from secrets
        run: |
          echo "VITE_AZURE_ENDPOINT=${{ secrets.VITE_AZURE_ENDPOINT }}" >> .env
          echo "VITE_AZURE_API_KEY=${{ secrets.VITE_AZURE_API_KEY }}" >> .env
          echo "VITE_API_VERSION=${{ secrets.VITE_API_VERSION }}" >> .env
          echo "VITE_O4_MINI_ENDPOINT=${{ secrets.VITE_O4_MINI_ENDPOINT }}" >> .env
          echo "VITE_O4_MINI_DEPLOYMENT=${{ secrets.VITE_O4_MINI_DEPLOYMENT }}" >> .env
          echo "VITE_O4_MINI_API_VERSION=${{ secrets.VITE_O4_MINI_API_VERSION }}" >> .env
          echo "‚úÖ Environment file created"
        shell: bash

      - name: Build Electron app
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            npm run electron:build:win
          elif [ "$RUNNER_OS" == "macOS" ]; then
            npm run electron:build:mac
          else
            npm run electron:build:linux
          fi
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List build artifacts (for debugging)
        run: |
          ls -R release/
        shell: bash

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            release/*/*.exe
            release/*/win-unpacked/
          retention-days: 30

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: release/*/*.dmg
          retention-days: 30

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: release/*/*.AppImage
          retention-days: 30

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: release-windows

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-installer
          path: release-macos

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-installer
          path: release-linux

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-windows/**/*.exe
            release-macos/**/*.dmg
            release-linux/**/*.AppImage
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## üì¶ Downloads

            ### Windows
            Download the `.exe` installer below

            ### macOS
            Download the `.dmg` file below

            ### Linux
            Download the `.AppImage` file below

            ---

            ## üöÄ Installation Instructions

            See [INSTALL.md](https://github.com/${{ github.repository }}/blob/main/INSTALL.md) for detailed installation instructions.

            ## üìù Changelog

            See below for auto-generated release notes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
